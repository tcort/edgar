.\" edgar - a small LISP Interpreter written in C
.\" Copyright (c) 2013 Thomas Cort <linuxgeek@gmail.com>
.\"
.\" This program is free software: you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation, either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program.  If not, see <http://www.gnu.org/licenses/>.
.TH EDGAR "1" "July 2013" "edgar 1.0" "User Commands"
.SH NAME
edgar \- a small LISP Interpreter written in C
.SH SYNOPSIS
.B edgar
[\fIOPTION\fR] [\fIfilename\fR]
.SH DESCRIPTION
edgar implements a small subset of LISP in portable C. If the user specifies
a filename on the command line or pipes data to edgar, the results will be
written to standard out. If no file is specified, an interactive mode is
started where a user can interact with the LISP system directly.
.SH OPTIONS
.TP
\fB\-h\fR, \-?            \fB\-\-help\fR
Print a helpful message and exit
.TP
\fB-l file.lisp\fR        \fB\-\-lib file.lisp\fR
Loads the specified lisp file into the environment upon start-up.
.TP
\fB\-v\fR                 \fB\-\-version\fR
Print version information and exit
.SH LANGUAGE REFERENCE
.TP
\fB(ATOM a)\fR
Returns T if expression 'a' evaluates to an atom, otherwise NIL.
.TP
\fB(CAR l)\fR
Return the first element of list 'l'.
.TP
\fB(CDR l)\fR
Return all elements of list 'l' except for the first element.
.TP
\fB(COND (p1 e1) ... (pN eN))\fR
Evaluate each 'p' until one evaluates to T. Return the evaluation of
the corresponding 'e'. If no 'p' evaluates to true, NIL is returned.
.TP
\fB(CONS e1 e2)\fR
Create a new list with a CAR of 'e1' and a CDR of 'e2'.
.TP
\fB(DEFUN f (args) (body))\fB
Define a function named 'f' that accepts arguments 'args' and applies them 
to 'body'.
.TP
\fB(EQUAL e1 e2)\fR
Returns T if expression 'e1' evaluates to the evaluation of 
expression 'e2'. Otherwise, NIL is returned.
.TP
\fB(GREATER i1 i2)\fR
Return T if integer 'i1' is strictly greater than 'i2', otherwise NIL.
.TP
\fB(IF e1 e2 e3)\fR
Evaluate expression 'e1'. If true, return the evaluation of 'e2', otherwise
return the evaluation of 'e3'.
.TP
\fB(INT i)\fR
Returns T if expression 'i' evaluates to an integer, otherwise NIL.
.TP
\fB(LESS i1 i2)\fR
Return T if each integer 'i1' is strictly less than 'i2', otherwise NIL.
.TP
\fB(MINUS i1 i2)\fR
Difference the value of integers i1 and i2, and return the result.
.TP
\fB(PLUS i1 i2)\fR
Sum the value of integers i1 and i2, and return the result.
.TP
\fB(PRINT e)\fR
Evaluate expression 'e' and print the result to STDOUT.
.TP
\fB(QUOTE e)\fR
Return the expression 'e' exactly as it is, without evaluating it.
.TP
\fB(QUOTIENT i1 i2)\fR
Divide 'i1' by 'i2', and return the result.
.TP
\fB(REMAINDER i1 i2)\fR
Return the remainder of 'i1' divided by 'i2'.
.TO
\fB(SETQ a v)\fR
Assign value 'v' to atom 'a'. After calling this function, 'a' will evaluate
to 'v'.
.TP
\fB(TIMES i1 i2)\fR
Multiply the value of integers i1 and i2, and return the result.
.SH EXAMPLE PROGRAMS
Some example programs are provided in the 'examples' directory of the
source code distribution. They will be installed in the data directory
as well. On most systems, this will be /usr/share/edgar/examples or
/usr/local/share/edgar/examples or /usr/pkg/share/edgar/examples.
.SH AUTHOR
Written by Thomas Cort <linuxgeek@gmail.com>
.SH "REPORTING BUGS"
Report bugs to Thomas Cort <linuxgeek@gmail.com>
.SH COPYRIGHT
Copyright \(co 2013  Thomas Cort <linuxgeek@gmail.com>
.br
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
